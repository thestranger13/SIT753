pipeline {
    agent any
    stages {
        // Checkout the code from the Git repository
        stage('Checkout SCM') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        // Build stage using Docker 
        stage('Build Stage') {
            steps {
                script {
                    // Docker image: release version 1.0.0
                    sh 'docker build -t vehicle-checker:v1.0.0 -f vehicleChecker/Dockerfile vehicleChecker/'
                }
            }
        }

        // verify if it is built - to be deleted 
        stage('Verify Docker Image') {
            steps {
                script {
                    sh 'docker images'
                }
            }
        }

        // Code Quality Analysis Stage using ESLint
        stage('Code Quality Analysis Stage') {
            steps {
                script {
                    // Ensure that the dependencies of the project have been installed
                    sh 'npm install --prefix vehicleChecker' 
                    // Run ESLint to check code quality
                    sh 'npm run lint --prefix vehicleChecker' 
                }
            }
        }

        // Test Web Application using Mocha
        stage('Test Stage') {
            steps {
                script {
                    // Run the unit test using mocha 
                    sh 'npm test --prefix vehicleChecker' 
                }
            }
        }

        // Deploy Docker Container
        stage('Deploy Stage') {
            steps {
                script {
                    // Stop and remove any existing container
                    sh 'docker stop vehicle-checker || true'
                    sh 'docker rm vehicle-checker || true'
                    
                    // Run the new Docker container mapped to port 4000
                    sh 'docker run -d --name vehicle-checker -p 4000:4000 vehicle-checker:v1.0.0'
                }
            }
        }

        // to be removed 
        stage('Verify Docker Images Before Push') {
            steps {
                script {
                    sh 'docker images'
                }
            }
        }

       // Release Stage with Heroku
        stage('Release') {
            steps {
                withCredentials([string(credentialsId: 'HEROKU_API_KEY', variable: 'HEROKU_API_KEY')]) {
                    script {
                        // Login to Heroku
                        sh 'heroku container:login'
                        // Set the stack
                        sh 'heroku stack:set container --app vehiclecheckerdeployment'
                        // Tag the image 
                        sh 'docker tag vehicle-checker:v1.0.0 registry.heroku.com/vehiclecheckerdeployment/web'
                        // Push the Docker image to Heroku
                        sh 'heroku container:push web --app vehiclecheckerdeployment'
                    }
                }
            }
        }
    } // Closing brace for stages

    post {
        always {
            // Clean up old containers if necessary
            sh 'docker rm -f vehicle-checker || true'
        }
    }
}